<!DOCTYPE html>

<html lang="en"> 

  <head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" /> 
	<title>Homework 3 - processing forms</title>

	<style>
	/* Your styles go here */
    form {background-color:silver; font-family:Arial; color:Navy;
    padding-left:50px; padding-top:20px; padding-bottom:20px;
    margin-right:auto; margin-left:auto; width:60%;}
    .but {width:200px; height:60px; background-color:magenta; color:black;}
    p#desc {margin:50px 200px; font-family:cursive; }
    h3 {font-family:lucida handwriting; font-size:3em; text-align:center;}

	</style>
	
	<script>
	/* Your JavaScript goes here */
	function showData() {
            // Get the values from the form
            let product = document.forms["dafrm"]["product"].value.trim().toLowerCase();
            let quantity = document.forms["dafrm"]["quantity"].value.trim();
            let amountField = document.forms["dafrm"]["AmtDue"];
            
            // Validate product
			const validProducts = ["milk", "apple", "fish"];
            if (!validProducts.includes(product)) {
                alert("Please enter a valid product: Milk, Apple, or Fish.");
                amountField.value = "";
                return false;
            }
			
            // Validate quantity
            if (quantity === "" || isNaN(quantity)) {
                alert("Please enter a valid numeric quantity.");
                amountField.value = "";
                return false;
            }

            // Convert quantity to a number
            quantity = parseFloat(quantity);

            // Calculate the amount owed
            let cost = 0;
            switch (product) {
                case "milk":
                    cost = 3.50;
                    break;
                case "apple":
                    cost = 0.99;
                    break;
                case "fish":
                    cost = 5.99;
                    break;
            }
            let amountOwed = cost * quantity;

			// Display the amount owed with 2 decimal places
            amountField.value = `$${amountOwed.toFixed(2)}`;
            return false; // Prevent form submission
        }

	</script>
  </head>

  <body>
    <form id="dafrm" action="" method="POST" onsubmit="return showData()">
        <p>
            <input type="text" name="product" size="20" placeholder="Enter product..."/>
            &nbsp; &nbsp;&nbsp;
            <input type="text" name="quantity" size="20" placeholder="Enter quantity.."/>
        </p>
        <p>
            <input type="text" name="AmtDue" size="20" placeholder="show amount due" readonly/>
        </p>
        <p>
            <input class="but" type="submit" name="submit" value="What Do I Owe"/>
            &nbsp; &nbsp;&nbsp;
            <input class="but" type="reset" name="reset" value="Clear All"/>  
        </p>
    </form>

<h2>coPilot Reflection </h2>
<p>The prompt I give to coPilot is: How would you solve this in JavaScript?+the hw description mentioned above. </p>
<p>In my code, I structured the showData() function to retrieve form values, perform basic validation checks, and calculate the amount owed based on the product and quantity input. I separated out each step clearly: first retrieving values, then validating each one, and finally calculating and displaying the result. However, I didn't include `return` statements after each `alert`, meaning that the function continues to run even if there are invalid inputs. This could lead to unintended calculations or errors.
</p>
<p>
	The coPilot version, by contrast, is a bit more optimized in terms of logic flow. It uses an object to store the product prices, which makes it easier to add or modify products if needed. Additionally, the AI code immediately stops execution using `return` statements right after each `alert`, which keeps the function cleaner by preventing further code execution when an error is detected. This approach reduces the chances of unexpected outcomes.
</p>

	<p>
		While both versions achieve the same end result, the AI version feels more clear and concise, and it may be a bit easier to maintain if I want to expand or modify it in the future. My code, on the other hand, is straightforward and logically broken down into steps, which makes it clear to follow, even if it's not as streamlined. </p> 
</body>
</html>
